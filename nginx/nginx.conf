# Main Nginx configuration for video streaming and file downloads
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss;

    server {
        listen 80;
        server_name storage.local;

        # Increase buffer sizes for large files
        client_max_body_size 0;
        client_body_buffer_size 16m;

    # Video streaming with Range 206 support - OPTIMIZED FOR FAST LOADING
    location /videos/ {
        alias /app/file_uploads/videos/;
        
        # MIME types
        types {
            video/mp4 mp4;
        }
        
        # Critical: Enable range requests for seeking (HTTP 206 Partial Content)
        add_header Accept-Ranges bytes always;
        
        # CORS headers for video playback
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Range, Content-Range" always;
        add_header Access-Control-Expose-Headers "Content-Length, Content-Range, Accept-Ranges" always;
        
        # Performance optimizations for FAST video streaming
        sendfile on;              # Use kernel sendfile() for efficiency
        tcp_nopush on;            # Send headers in one packet
        tcp_nodelay on;           # Don't buffer data-sends (disable Nagle)
        aio threads;              # Use async I/O with thread pool
        
        # CRITICAL: Set larger output buffers for bigger Range chunks
        # Mặc định Nginx gửi chunks nhỏ (32KB), ta tăng lên 1MB để giảm số request
        output_buffers 4 1m;
        
        # Read ahead optimization - load bigger chunks at once
        read_ahead 2m;
        
        # Enable open file cache to reduce disk I/O for repeated requests
        open_file_cache max=1000 inactive=20s;
        open_file_cache_valid 30s;
        open_file_cache_min_uses 2;
        open_file_cache_errors on;
        
        # No bandwidth limit for fast loading
        # limit_rate_after 5m;
        # limit_rate 2m;
        
        # Cache for 1 hour (short enough for updates, long enough for performance)
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
        
        # Handle OPTIONS for CORS
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Range, Content-Range" always;
            add_header Content-Length 0;
            return 204;
        }
    }

    # Materials download
    location /materials/ {
        alias /app/file_uploads/materials/;
        
        # Force download for materials
        add_header Content-Disposition "attachment";
        add_header Accept-Ranges bytes always;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
        
        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        
        # Caching
        expires 7d;
        add_header Cache-Control "public";
        
        # Handle OPTIONS for CORS
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            add_header Content-Length 0;
            return 204;
        }
    }

    # Health check
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }

        # Optional: Auth endpoint for future authentication
        # Uncomment when ready to enable authentication
        # location = /_auth {
        #     internal;
        #     proxy_pass http://storage-backend:8080/authz;
        #     proxy_pass_request_body off;
        #     proxy_set_header Content-Length "";
        #     proxy_set_header X-Original-URI $request_uri;
        #     proxy_cache auth_cache;
        #     proxy_cache_key "$http_authorization$request_uri";
        #     proxy_cache_valid 200 30s;
        # }
    }

    # Optional: Cache zone for auth requests (for future use)
    # proxy_cache_path /var/cache/nginx/auth keys_zone=auth_cache:10m max_size=100m inactive=60s;
}
