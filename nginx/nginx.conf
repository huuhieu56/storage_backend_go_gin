server {
    listen 80;
    server_name storage.local;

    # Increase buffer sizes for large files
    client_max_body_size 0;
    client_body_buffer_size 16m;

    # Video streaming with Range 206 support
    location /videos/ {
        root /srv/lms;
        
        # MIME types
        types {
            video/mp4 mp4;
        }
        
        # Enable range requests for seeking
        add_header Accept-Ranges bytes always;
        
        # CORS headers for video playback
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Range" always;
        
        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        aio on;
        directio 4m;
        
        # Caching for video files
        expires 30d;
        add_header Cache-Control "public, immutable";
        
        # Handle OPTIONS for CORS
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Range" always;
            add_header Content-Length 0;
            return 204;
        }
    }

    # Materials download
    location /materials/ {
        root /srv/lms;
        
        # Force download for materials
        add_header Content-Disposition "attachment";
        add_header Accept-Ranges bytes always;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
        
        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        
        # Caching
        expires 7d;
        add_header Cache-Control "public";
        
        # Handle OPTIONS for CORS
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            add_header Content-Length 0;
            return 204;
        }
    }

    # Health check
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }

    # Optional: Auth endpoint for future authentication
    # Uncomment when ready to enable authentication
    # location = /_auth {
    #     internal;
    #     proxy_pass http://storage-backend:8080/authz;
    #     proxy_pass_request_body off;
    #     proxy_set_header Content-Length "";
    #     proxy_set_header X-Original-URI $request_uri;
    #     proxy_cache auth_cache;
    #     proxy_cache_key "$http_authorization$request_uri";
    #     proxy_cache_valid 200 30s;
    # }
}

# Optional: Cache zone for auth requests (for future use)
# proxy_cache_path /var/cache/nginx/auth keys_zone=auth_cache:10m max_size=100m inactive=60s;
